• document ws2 lib return value convention (errno vs. WSAGetLastError)
  for every individual function…

• Android 11 strict mode prüfen, falls möglich

• Warnungen:
  – restlichen Gradle-6-Warnungen:
    https://stackoverflow.com/q/65479693/2171120
  – Obsolete custom lint check:
    https://stackoverflow.com/q/65479506/2171120
    (temporarily worked around)

• com.android.tools.build:gradle:4.1.1 unbrauchbar:
  ‣ https://youtrack.jetbrains.com/issue/IDEA-252823
  ‣ https://youtrack.jetbrains.com/issue/IDEA-252775
  benötigt IDEA 2021.1, kein Backport auf 2020.x vorgesehen
• com.android.tools.build:gradle:4.0.2 unbrauchbar:
  ‣ https://youtrack.jetbrains.com/issue/IDEA-258598

• CodeQL vs. NDK
  https://stackoverflow.com/q/65480083/2171120

• OWASP plugin for Gradle
  https://github.com/jeremylong/dependency-check-gradle/issues/206

• Android/Unity
  – import the four generated shared objects into Unity, assigning
    Android support and the correct CPU to each, according to
    https://docs.unity3d.com/Manual/AndroidNativePlugins.html
    ‣ maybe we can just import the AAR instead?
  – Unity should not (currently) use stackalloc, apparently it’s
    problematic in its VM; use #ifdef to heap-allocate (maybe use
    a pool?) only on Unity, keeping stackalloc in proper .net/CLR?
  – now [DllImport("ecn-bitw")] “should just work”, let’s hope it
    selects the correct .so according to what platform it’s running on
  - numerical	SocketFlags		flags
	2	OutOfBand		MSG_OOB
	1	Peek			MSG_PEEK
  - Span<byte> bytes = stackalloc byte[length];
  - ReadOnlySpan<int> span = new int[bufferSize];
    fixed (int* ptr = &MemoryMarshal.GetReference(span)) {
        return Native.Sum(Unsafe.AsRef<int>(ptr), (UIntPtr)span.Length);
    }
 vs fixed (int* ptr = span) {
        return Native.Sum(ptr, span.Length);
  - receive(0) → receive(1,|MSG_PEEK,&dummy_buf)
  – Unity: might need to copy out built DLLs to Unity directory
    structure, probably keep it there even through (n)make clean
