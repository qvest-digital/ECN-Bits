┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ ECN-Bits • Java™ library for Android ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

See ../README for what this is all about.

To build, use JDK 8 or 11 (no newer versions): Android only
supports language levels 7 and 8 anyway, and Java 15 changed
the DatagramSocket internals in an incompatible way.

This library mostly offers the following entry points:
• de.telekom.llcto.ecn_bits.android.lib.Bits
• de.telekom.llcto.ecn_bits.android.lib.ECNBitsDatagramChannel
  (extends DatagramChannel) via static open() factory method
• de.telekom.llcto.ecn_bits.android.lib.ECNBitsDatagramSocket
  (extends DatagramSocket) via new and constructors

Both ECNBitsDatagramSocket and the ECNBitsDatagramChannel.socket()
result derive from AbstractECNBitsDatagramSocket (which itself
derives from DatagramSocket). Both AbstractECNBitsDatagramSocket
and ECNBitsDatagramChannel implement AbstractECNBitsDatagramReceiver
with the methods to inspect the IP traffic class octet of the last
packet received or to measure congestion in the background:

The user can either retrieve, for each received datagram,
the IP traffic class byte (using the retrieveLastTrafficClass
method on the socket), or by using the startMeasurement method
and then calling the getMeasurement method periodically, e.g.
every 20 ms, retrieving the congestion factor from its result.

For either AbstractECNBitsDatagramSocket implementation, when
reusing DatagramPacket instances, (re‑)setting their length
before each receive call is mandatory.

The library is wholly contained in the ecn-lib/ directory.
It can be added to other projects by importing into your project:
https://developer.android.com/studio/projects/android-library#AddDependency

The app/ subdirectory contains an example application. The
example client talks to a server (for example the one from
the C/CLI library) using DatagramSocket (“send packet”) or
DatagramChannel (“start channel”).

Normal Android build mechanisms (./gradlew build) or building
in IntelliJ / Android Studio should be used.

Testing in the IDE requires Linux as host and some special
setup, see: https://stackoverflow.com/a/65172775/2171120
(Basically run them from the command line once, copy/paste
the -Djava.library.path=… into an IntelliJ Run Configuration.)

To test from the command line, run ./gradlew test cAT
where test runs the unittests on the local buildhost (dev PC)
and cAT (connectedAndroidTest, in full) runs the instrumented
tests on a connected Android device or running emulator. You
can do ../gradlew test cAT in a subdirectory (app or ecn-lib)
as well. Again, the unit tests require a Linux host to have
even some coverage at all, since they test a JNI library, for
ecn-lib at least.

Dependency check: ./gradlew depCAn (or depCAg)

Test output for the unittests is shown on stdout/stderr or in
the IDE pane; the instrumented tests output to logcat, so use
“adb shell” with “logcat -s ECN-Bits-JNI:D ECN-Bits-JNITest:D”
to watch it.

The output of the tests will show several exceptions complete
with backtraces; this is expected, the output helps to visually
inspect for correctness if necessary.

When testing on the Android emulator note that its network
emulation removes the ECN bits from packets. Use either a
connection to localhost (by compiling the C/CLI library, e.g.
with musl libc, statically and running the server on localhost)
or test on “bare metal” (real hardware), or connect to a VPN
from inside the emulator. We could add the server as example
GUI application, later.

The best option would be making Google add API to retrieve the
traffic class (or, even better, adding that to OpenJDK).

Note that IPv6 addresses look ugly in Java because it violates
RFC 5952 § 4.2, and besides that RFC 5952 § 4.3 also is ugly.
They will be legible enough, though (for our purposes anyway).
