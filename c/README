┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ ECN-Bits • C/CLI for Darwin/Linux/FreeBSD/MidnightBSD ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┌─────────────┐
│ Compilation │
└─────────────┘

With GNU make and build-essential installed, it is sufficient to run
“make” (“gmake” on BSD), either in the top-level “c” directory or a
subdirectory. (If the library was not yet installed system-wide, it
must have been locally built before the “client” and “server” example
directories can be built.) The usual variables (CC, AR, RANLIB,
CFLAGS, CPPFLAGS, LDFLAGS, LIBS, LDSTATIC, etc.) are supported.

Running “make install” will install the library, its manual pages
and development headers; this honours the standard PREFIX variable.
“make uninstall” will erase these installed files from the system.
(On BSD systems use “gmake install” and “gmake uninstall”.)

Statically linked against musl libc, the examples will also work
on Android, e.g. via adb shell; useful for testing.

Link a program with -lecn-bits to use the library; functions and
headers are documented in the manual pages.

┌───────────┐
│ Structure │
└───────────┘

inc/ ‣ development headers (public) for the library
lib/ ‣ library source code, manual pages (documentation)

client/ and server/
‣ example applications, see below

*.mk, GNUmakefile
‣ build system

┌───────────────────────┐
│ Example client/server │
└───────────────────────┘

These applications demonstrate how to use the ECN-Bits library
and are deliberately simple. See SCReAM for an actual example
of how to develop L4Sified bandwidth-adaptive applications.

Run the server on one system: ./server [+dscp] [host] port

Arguments are:
• +dscp: “dscp”, either a decimal or (0x-prefixed) hexadecimal number,
  sets the DSCP bits — all but the lowest two, which are the ECN bits —
  in the response packet traffic class (optional, default 0x00)
• host: IP address or hostname (DNS-resolved) to bind to (default any)
• port: port to bind to (mandatory)

Run the client on another (or same) system: ./client host post [tc]

Arguments are:
• host: IP address or hostname (DNS-resolved) of server to send to
  (multiple results are attempted in order)
• port: (server) port to send to
• tc: traffic class for sent packets, default: ECT0
  valid: NO, ECT0, ECT1, CE or a decimal, octal (leading 0) or
  hexadecimal (leading 0x) integer between 0 and 255, inclusive
  optionally prefixed with an exclamation mark to force using
  ecnbits_mkcmsg and sendmsg instead of ecnbits_tc and send/write
  (needed for DSCP bits on MacOSX with v4-mapped addresses, and on
  Winsock2, where setting anything other than NO, ECT0 or ECT1 will
  fail and the DSCP bits must be zero)

The client will send a “hello” packet to the server, which
receives it, displays a line with the timestamp it received
the packet, whether it was truncated, which ECN bits were set,
and its content.

The server then sends FOUR packets back, with almost the same
content (truncation, server timestamp, received ECN bits, as
above, and an arrow followed by a number). The trailing number
goes from 0 to 3 and matches the ECN bits set on the return
packet.

The client (after sending the initial packet it waits for up
to a second for responses) displays the packet data received
together with their ECN bits and local timestamps. (Timestamps
are in UTC.)

Both applications support IPv6 and legacy IPv4; the client
can be used against e.g. the BSD inetd daytime service as well,
or netcat-openbsd, for testing. The client terminates after
one run; the server can be terminated by pressing Ctrl-C.

Example session:

SERVER│$ ./server/server 1234
SERVER│Listening on [0.0.0.0]:1234... ok
SERVER│Listening on [::]:1234... ok
SERVER│
CLIENT│$ ./client/client ip6-localhost 1234
CLIENT│Trying [::1]:1234... connected
SERVER│2020-09-20T17:06:48Z notrunc [::1]:47815 ECT(0){02} <hi!>
CLIENT│2020-09-20T17:06:48Z no ECN{00} <[::1]:47815 2020-09-20T17:06:48Z ECT(0){02} notrunc -> 0>
CLIENT│2020-09-20T17:06:48Z ECT(1){01} <[::1]:47815 2020-09-20T17:06:48Z ECT(0){02} notrunc -> 1>
CLIENT│2020-09-20T17:06:48Z ECT(0){02} <[::1]:47815 2020-09-20T17:06:48Z ECT(0){02} notrunc -> 2>
CLIENT│2020-09-20T17:06:48Z ECN CE{03} <[::1]:47815 2020-09-20T17:06:48Z ECT(0){02} notrunc -> 3>
CLIENT│$ ./client/client localhost 1234 0xFF
CLIENT│Trying [127.0.0.1]:1234... connected
SERVER│2020-09-20T17:06:56Z notrunc [127.0.0.1]:39464 ECN CE{FF} <hi!>
CLIENT│2020-09-20T17:06:56Z no ECN{00} <[127.0.0.1]:39464 2020-09-20T17:06:56Z ECN CE{FF} notrunc -> 0>
CLIENT│2020-09-20T17:06:56Z ECT(1){01} <[127.0.0.1]:39464 2020-09-20T17:06:56Z ECN CE{FF} notrunc -> 1>
CLIENT│2020-09-20T17:06:56Z ECT(0){02} <[127.0.0.1]:39464 2020-09-20T17:06:56Z ECN CE{FF} notrunc -> 2>
CLIENT│2020-09-20T17:06:56Z ECN CE{03} <[127.0.0.1]:39464 2020-09-20T17:06:56Z ECN CE{FF} notrunc -> 3>

See ../ws2/README for an example session on Windows®.

【IMPORTANT】 Note how the server binds to *both* 0.0.0.0 (INADDR_ANY)
and :: (IN6ADDR_ANY), not just IN6ADDR_ANY. This is so that it receives
IPv4 connections on IPv4 sockets, not IPv6 sockets as traffic class
handling on v4-mapped IPv6 sockets isn’t portable; see below for details.

【SECURITY】 See the comments in server/server.c wrt. ECNBITS_REUSEPORT!

┌─────────────┐
│ Portability │
└─────────────┘

This library and the example programs uses standard POSIX
system calls; they will generally work on unixoid operating
systems. However the API/ABI employed to set and read the
IP header traffic class octet is operating system-specific.

The IPv6 API is standardised in RFC3542, whose wording is
vague. All known implementations, however, choose the same
reading, and this library takes care to support the other
interpretation.

The legacy IP (IPv4) API/ABI is, au contraire, n̲o̲t̲ widely
standardised — this library supports the implementation in
FreeBSD/MidnightBSD, and the ones found in Linux, Winsock2
and Darwin/Mac OSX so far.

Receiving the traffic class on IPv6 sockets operating with
v4-mapped (::FFFF:0.0.0.0/96) IPv6 addresses is fragile:
Linux requires the IPv4 versions of the socket options and
control messages; MidnightBSD (and therefore FreeBSD) don’t
accept that (but since they disable v4-mapped by default,
this is no problem in reality). This library only attempts
somewhat supporting this on Linux, as Android uses that…
Darwin (Mac OSX) also supports v4-mapped addresses, except
that ecnbits_tc(3) can preset ECN bits (not DSCP) for them.
As implication, binding to only an IPv6 address, server-side,
may not work except perhaps on Linux (including WSL 1 and 2,
excluding native Windows/Winsock2) and Darwin.

As of version 2.1, the library is thread-safe except when
ecnbits_rdmsg() must inject a local control message buffer.

The traffic class for outgoing packets cannot be set under WSL 1
at all and any attempts to do so are (silently) ignored; this is
a system limitation.

Android is best served with the top-level c/ (for console applications,
maybe statically linked with musl libc, or with bionic) or android/ for
regular Java™ applications. The ws2/android/ build is mostly for Unity
targetting Android; its built AAR can be reused elsewhere, though.
