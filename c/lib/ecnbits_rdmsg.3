.\" -*- mode: nroff -*-
.\"-
.\" Copyright © 2008, 2009, 2010, 2016, 2018, 2020
.\"	mirabilos <m@mirbsd.org>
.\" Copyright © 2020, 2021
.\"	mirabilos <t.glaser@tarent.de>
.\" Licensor: Deutsche Telekom
.\"
.\" Provided that these terms and disclaimer and all copyright notices
.\" are retained or reproduced in an accompanying document, permission
.\" is granted to deal in this work without restriction, including un‐
.\" limited rights to use, publicly perform, distribute, sell, modify,
.\" merge, give away, or sublicence.
.\"
.\" This work is provided “AS IS” and WITHOUT WARRANTY of any kind, to
.\" the utmost extent permitted by applicable law, neither express nor
.\" implied; without malicious intent or gross negligence. In no event
.\" may a licensor, author or contributor be held liable for indirect,
.\" direct, other damage, loss, or other issues arising in any way out
.\" of dealing in the work, even if advised of the possibility of such
.\" damage or existence of a defect, except proven that it results out
.\" of said person’s immediate fault when using the work as intended.
.\"-
.\" Try to make GNU groff and AT&T nroff more compatible
.\" * ` generates ‘ in gnroff, so use \`
.\" * ' generates ’ in gnroff, \' generates ´, so use \*(aq
.\" * - generates ‐ in gnroff, \- generates −, so .tr it to -
.\"   thus use - for hyphens and \- for minus signs and option dashes
.\" * ~ is size-reduced and placed atop in groff, so use \*(TI
.\" * ^ is size-reduced and placed atop in groff, so use \*(ha
.\" * \(en does not work in nroff, so use \*(en for a solo en dash
.\" *   and \*(EM for a correctly spaced em dash
.\" * <>| are problematic, so redefine and use \*(Lt\*(Gt\*(Ba
.\" Also make sure to use \& *before* a punctuation char that is to not
.\" be interpreted as punctuation, and especially with two-letter words
.\" but also (after) a period that does not end a sentence (“e.g.\&”).
.\" The section after the "doc" macropackage has been loaded contains
.\" additional code to convene between the UCB mdoc macropackage (and
.\" its variant as BSD mdoc in groff) and the GNU mdoc macropackage.
.\"
.ie \n(.g \{\
.	if \*[.T]ascii .tr \-\N'45'
.	if \*[.T]latin1 .tr \-\N'45'
.	if \*[.T]utf8 .tr \-\N'45'
.	ds <= \[<=]
.	ds >= \[>=]
.	ds Rq \[rq]
.	ds Lq \[lq]
.	ds sL \(aq
.	ds sR \(aq
.	if \*[.T]utf8 .ds sL `
.	if \*[.T]ps .ds sL `
.	if \*[.T]utf8 .ds sR '
.	if \*[.T]ps .ds sR '
.	ds aq \(aq
.	ds TI \(ti
.	ds ha \(ha
.	ds en \(en
.\}
.el \{\
.	ds aq '
.	ds TI ~
.	ds ha ^
.	ds en \(em
.\}
.ie n \{\
.	ds EM \ \*(en\ \&
.\}
.el \{\
.	ds EM \f(TR\^\(em\^\fP
.\}
.\"
.\" Implement .Dd with the Mdocdate RCS keyword
.\"
.rn Dd xD
.de Dd
.ie \\$1$Mdocdate: \{\
.	xD \\$2 \\$3, \\$4
.\}
.el .xD \\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \\$7 \\$8
..
.\"
.\" .Dd must come before the macropackage-specific setup code.
.\"
.Dd $Mdocdate: April 15 2021 $
.\"
.\" Check which macro package we use, and do other -mdoc setup.
.\"
.ie \n(.g \{\
.	if \*[.T]utf8 .tr \[la]\*(Lt
.	if \*[.T]utf8 .tr \[ra]\*(Gt
.	ie d volume-ds-1 .ds tT gnu
.	el .ie d doc-volume-ds-1 .ds tT gnp
.	el .ds tT bsd
.\}
.el .ds tT ucb
.\"-
.Dt ECNBITS_RDMSG 3
.Os ECN-Bits
.Sh NAME
.Nm ecnbits_rdmsg ,
.Nm ecnbits_recvmsg
.Nd "receive a message (read a packet) from a socket and determine the traffic class including ECN bits"
.Sh SYNOPSIS
.In sys/types.h
.In sys/socket.h
.In ecn\-bits.h
.Ft ssize_t
.Fn ecnbits_rdmsg "int socketfd" "struct msghdr *msg" "int flags" "unsigned short *ecnresult"
.Ft ssize_t
.Fn ecnbits_recvmsg "int socketfd" "struct msghdr *msg" "int flags" "unsigned short *ecnresult"
.Sh DESCRIPTION
The
.Fn ecnbits_rdmsg
and
.Fn ecnbits_recvmsg
functions work equivalent to the system call
.Xr recvmsg 2
but take an extra argument
.Ar ecnresult .
.Pp
The
.Fn ecnbits_recvmsg
function wraps the system call, extending:
If
.Ar ecnresult
is
.Dv NULL ,
.Fn ecnbits_recvmsg
just passes control to the equivalent system function
.Xr recvmsg 2 .
Otherwise, if
.Ar msg\-\*(Gtmsg_control
is
.Dv NULL ,
a stack-allocated buffer is temporarily injected into a local
.Vt struct msghdr ,
otherwise, the passed structure is used.
Then, the system call
.Xr recvmsg 2
is executed, and upon success, the control buffer is inspected
for the traffic class octet, which is stored, in
.Xr ECNBITS_VALID 3
format, in the location pointed to by
.Ar ecnresult
if possible (if not, an indicator of invalidity is stored).
If the socket was not set up with
.Xr ecnbits_prep 3
beforehand, determining the traffic class is usually not possible.
If the user passed a buffer as
.Ar msg\-\*(Gtmsg_control
that is not large enough for all control messages, determining
it may also fail.
.Fn ecnbits_recvmsg
ensures the temporarily injected buffer is not seen by the caller,
but passes along other changes to the
.Vt struct msghdr
used.
.Pp
By contrast,
.Fn ecnbits_rdmsg
assumes that
.Ar ecnresult
is not
.Dv NULL ,
injects (unless already set) a static (not thread-isolated) control buffer into the passed
.Ar msg
and leaves it there for the caller to inspect afterwards.
.Pp
Callers that know to set
.Ar ecnresult
should use
.Fn ecnbits_rdmsg ,
which is faster, unless drop-in compatibility with existing applications
managing the
.Ar msg\-\*(Gtmsg_control
argument themselves is required.
.Pp
See
.Xr recvmsg 2
for the description of
.Ar msg
and
.Ar flags .
.Sh RETURN VALUES
The
.Fn ecnbits_rdmsg
and
.Fn ecnbits_recvmsg
functions return the number of bytes received if successful;
otherwise the value \-1 is returned and the global variable
.Va errno
is set to indicate the error.
.Sh EXAMPLES
The following code fragment illustrates the usage:
.Bd -literal -offset indent
char buf[512];
unsigned short ecnresult;
struct msghdr msg = {0};
struct iovec iov;

iov.iov_base = buf;
iov.iov_len = sizeof(buf);
msg.msg_iov = &iov;
msg.msg_iovlen = 1;
if (ecnbits_rdmsg(socketfd, &msg, 0, &ecnresult) == (ssize_t)\-1)
	err(1, "recvmsg");
if (ECNBITS_VALID(ecnresult))
	printf("%s\en", ecnbits_meanings[ECNBITS_BITS(ecnresult)]);
.Ed
.Pp
Note that the socket, after creation, must have been set up with a call to
.Xr ecnbits_prep 3
(once) prior to use with this function.
.Sh ERRORS
These functions return the same errors as the system call
.Xr recvmsg 2 .
.Sh SEE ALSO
.Xr recvmsg 2 ,
.Xr cmsg 3 ,
.Xr ECNBITS_BITS 3 ,
.Xr ecnbits_prep 3 ,
.Xr ecnbits_recvfrom 3 ,
.Xr ip 4 ,
.Xr ip6 4 ,
.Xr ip 7 ,
.Xr ipv6 7 ,
.Xr socket 7 ,
.Xr udp 7
.Pp
.Bl -tag -width 2n
.It Pa https://github.com/qvest\-digital/ECN\-Bits
home of the ECN-Bits library
.It Pa https://github.com/EricssonResearch/scream
SCReAM, an example design for a managed latency-adaptive application
.El
.Sh AUTHORS
.An mirabilos Aq t.glaser@tarent.de
for Deutsche Telekom.
.Sh CAVEATS
Calls to
.Fn ecnbits_rdmsg
where the
.Ar msg\-\*(Gtmsg_control
argument is
.Dv NULL
are not thread-safe.
.Pp
Should determining the traffic class fail due to control message buffer
truncation, recompile the library with a larger
.Dv ECNBITS_CMSGBUFLEN .
.Sh LICENCE
The MirOS Licence
.Pq short name : Li MirBSD
